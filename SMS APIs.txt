Server << server >>: https://sms-backend-8vd4.onrender.com

1. // Staff Login
API: << server >>/api/v1/staff/login
Content: userID(phone/userName/email) and password

2. // Resetting staff DEFAULT PASSWORD after Login
API: << server >>/api/v1/staff/default-reset
Content: password
Authorization: Bearer <token from login>

3. // Creating a new department
API: << server >>/api/v1/department/create
Content: name, department and hodId
Authorization: Bearer <token from login>

4. // Update an existing department
API: << server >>/api/v1/department/update/id
Authorization: Bearer <token from login>

5. // Delete an existing department
API: << server >>/api/v1/department/delete/id
Authorization: Bearer <token from login>

6. // List of departments
API: << server >>/api/v1/department/all
Authorization: Bearer <token from login>

7. // Creating a new class with sections
API: << server >>/api/v1/class/create
Content: name, grade, headTeacherId, sections
Authorization: Bearer <token from login>
eg: {
  "className": "Primary 6",
  "grade": 6,
  "headTeacherId": 3,
  "sections": [
    { "name": "A", "capacity": 30 },
    { "name": "B", "capacity": 25 }
  ]
}

8. // Update an existing class
API: << server >>/api/v1/class/update/id
Authorization: Bearer <token from login>

9. // Delete an existing class
API: << server >>/api/v1/class/delete/id
Authorization: Bearer <token from login>

10. // Create a new class section for a particular class
API: << server >>/api/v1/class/create_class_section
Content: classId, name, capacity
Authorization: Bearer <token from login>

11. // Updating a class section
API: << server >>/api/v1/class/update_section/classId/sectionId
Content: name, capacity
Authorization: Bearer <token from login>

12. // Delete an existing class section
API: << server >>/api/v1/class/delete_section/classId/sectionId
Authorization: Bearer <token from login>

13. // Fetching a particular class with its sections 
API: << server >>/api/v1/class/get_class/id
Authorization: Bearer <token from login>

14. // List of classes
API: << server >>/api/v1/class/all
Authorization: Bearer <token from login>

15. // Get all class sections for multi select when assigning teachers
API: << server >>/api/v1/class/sections
Authorization: Bearer <token from login>

16. // List of Teachers for hod and headTeacher dropdownÂ options
API: << server >>/api/v1/teacher/all
Authorization: Bearer <token from login>

17. // Creating a new subject
API: << server >>/api/v1/subject/create
Content: name, code and description
Authorization: Bearer <token from login>

18. // Update an existing subject
API: << server >>/api/v1/subject/update/id
Authorization: Bearer <token from login>

19. // Delete an existing subject
API: << server >>/api/v1/subject/delete/id
Authorization: Bearer <token from login>

20. // List of subjects
API: << server >>/api/v1/subject/all
Authorization: Bearer <token from login>

21. // Staff Registration by Admin
API: << server >>/api/v1/staff/register
Content: Required - (userName, firstName, lastName, role, email, phone, gender)
Update/Optional fields - (userName, firstName, lastName, email, phone, address, role, staffID, dob, gender, departmentId)
Authorization: Bearer <token from login>

22. // Get student or staff details
API: << server >>/api/v1/staff/details/id/role
Authorization: Bearer <token from login>

23. // Update an existing staff
API: << server >>/api/v1/staff/update/id
Authorization: Bearer <token from login>

24. // Delete an existing staff
API: << server >>/api/v1/staff/delete/id
Authorization: Bearer <token from login>

25. // Assign a class to a teacher
API: << server >>/api/v1/assigning/class
Content: teacherId, classSectionId
Authorization: Bearer <token from login>

26. // Assign a subject to a teacher
API: << server >>/api/v1/assigning/subject
Content: assignedTeacherId, subjectId
Authorization: Bearer <token from login>

27. // // Deleting an assigned subject for a particular teacher
API: << server >>/api/v1/staff/delete_assigned_subject/assignedTeacherId/subjectId
Authorization: Bearer <token from login>

28. // Deleting an assigned class for a particular teacher
API: << server >>/api/v1/staff/delete_assigned_class/assignedTeacherId
Authorization: Bearer <token from login>

29. // Get a teacher's assigned classes with subjects
API: << server >>/api/v1/assigning/all/id
Authorization: Bearer <token from login>

30. // Creating a new academic year
API: << server >>/api/v1/academic_year/create
Content: name, startDate, endDate
Authorization: Bearer <token from login>

31. // Fetching the active academic year
API: << server >>/api/v1/academic_year/active
Authorization: Bearer <token from login>

32. // Creating a new academic term
API: << server >>/api/v1/academic_term/create
Content: name, startDate, endDate, academicYearId
Authorization: Bearer <token from login>

33. // Fetching the active academic term
API: << server >>/api/v1/academic_term/active
Authorization: Bearer <token from login>

34. // List of all academic years
API: << server >>/api/v1/academic_year/all
Authorization: Bearer <token from login>

35. // List of all academic terms
API: << server >>/api/v1/academic_term/all
Authorization: Bearer <token from login>

// Staff Requesting Password Reset from Admin
API: << server >>/api/v1/staff/password-reset-request
Content: userID(phone/userName/email) as a post request

// Admin resetting password with email link request or from Admin requests' list
API: << server >>/api/v1/staff/admin-reset-password/"id:id, role:role" 
NB: resetToken or "id:id, role:role"

// List of pending Password reset requests
API: << server >>/api/v1/staff/pending-password-reset-requests
Authorization: Bearer <token from login>










