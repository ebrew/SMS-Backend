Server << server >>: http://localhost:3000 OR https://sms-backend-8vd4.onrender.com

ADMIN ROLE
1. // Staff Registration by Admin
API: << server >>/api/v1/staff/register
Method: POST
Content: Required - (userName, firstName, lastName, role, email, phone, gender)
Authorization: Bearer <token from login>
DEV: << server >>/api/v1/staff/dev
Content: { userName, firstName, lastName, email, phone }

2. // Staff Login
API: << server >>/api/v1/staff/login
Method: POST
Content: userID(phone/userName/email) and password

3. // Resetting staff DEFAULT PASSWORD after Login
API: << server >>/api/v1/staff/default-reset
Method: POST
Content: password
Authorization: Bearer <token from login>

4. // Admin Dashboard summary
API: << server >>/api/v1/staff/admin/dashboard_summary'
Method: GET
Authorization: Bearer <token from login>

DEPARTMENT
5. // Creating a new department
API: << server >>/api/v1/department/create
Content: name, department and hodId
Method: POST
Authorization: Bearer <token from login>

6. // Update an existing department
API: << server >>/api/v1/department/update/id
Method: POST
Authorization: Bearer <token from login>

7. // Delete an existing department
API: << server >>/api/v1/department/delete/id
Method: GET
Authorization: Bearer <token from login>

8. // List of departments
API: << server >>/api/v1/department/all
Method: GET
Authorization: Bearer <token from login>

CLASS AND ITS SECTIONS
9. // Creating a new class with sections
API: << server >>/api/v1/class/create
Content: name, grade, headTeacherId, sections
Method: POST
Authorization: Bearer <token from login>
eg: {
  "className": "Primary 6",
  "grade": 6,
  "headTeacherId": 3,
  "sections": [
    { "name": "A", "capacity": 30 },
    { "name": "B", "capacity": 25 }
  ]
}

10. // Update an existing class
API: << server >>/api/v1/class/update/id
Content: className, grade, headTeacherId
Method: POST
Authorization: Bearer <token from login>

11. // Delete an existing class
API: << server >>/api/v1/class/delete/id
Method: GET
Authorization: Bearer <token from login>

12. // Create a new class section for a particular class
API: << server >>/api/v1/class/create_class_section
Method: POST
Content: classId, name, capacity
Authorization: Bearer <token from login>

13. // Updating a class section
API: << server >>/api/v1/class/update_section/classId/sectionId
Method: POST
Content: name, capacity
Authorization: Bearer <token from login>

14. // Delete an existing class section
API: << server >>/api/v1/class/delete_section/classId/sectionId
Method: GET
Authorization: Bearer <token from login>

15. // Fetching a particular class with its sections and assigned subjects 
API: << server >>/api/v1/class/get_class/id
Authorization: Bearer <token from login>

16. // Fetching a particular section
API: << server >>/api/v1/class/get_section/id
Authorization: Bearer <token from login>

17. // List of all classes
API: << server >>/api/v1/class/all
Method: GET
Authorization: Bearer <token from login>

18. // Get all class sections for multi select when assigning teachers
API: << server >>/api/v1/class/sections
Method: GET
Authorization: Bearer <token from login>

19. // Assign a subject to a class, all sections under this class automatically get this subject assigned
API: << server >>/api/v1/assigning/class_subject
Content: classId, subjectId
Method: POST
Authorization: Bearer <token from login>

20. // Deleting an assigned subject to a class
API: << server >>/api/v1/assigning/delete_class_subject/classId/subjectId
Method: GET
router.get('/delete_class_subject/:classId/:subjectId', assignController.deleteAssignedClassSubject)

21. // List of Teachers for hod and headTeacher dropdownÂ options
API: << server >>/api/v1/teacher/all
Method: GET
Authorization: Bearer <token from login>

SUBJECT
22. // Creating a new subject
API: << server >>/api/v1/subject/create
Content: name, code and description
Method: POST
Authorization: Bearer <token from login>

23. // Update an existing subject
API: << server >>/api/v1/subject/update/id
Method: POST
Authorization: Bearer <token from login>

24. // Delete an existing subject
API: << server >>/api/v1/subject/delete/id
Method: GET
Authorization: Bearer <token from login>

25. // List of created subjects for class assignments
API: << server >>/api/v1/subject/all
Method: GET
Authorization: Bearer <token from login>

26. // Fetching a particular subject
API: << server >>/api/v1/subject/get_subject/id
Method: GET
Authorization: Bearer <token from login>

27. // Fetch class assigned subjects for teacher assignments; 
This gives a list of subjects assigned to a class from API 17 for individual teacher assignments
API: << server >>/api/v1/subject/all_class_subjects/classId
Method: GET
Authorization: Bearer <token from login>

28. // Get student or staff details
API: << server >>/api/v1/staff/details/id/role
Method: GET
NB: id and role are already in the initial response 
Authorization: Bearer <token from login>

29. // Update an existing staff
API: << server >>/api/v1/staff/update/id
Method: POST
Authorization: Bearer <token from login>

30. // Delete an existing staff
API: << server >>/api/v1/staff/delete/id
Method: GET
Authorization: Bearer <token from login>

31. // Assign a class to a teacher
API: << server >>/api/v1/assigning/class
Content: teacherId, classSectionId
Method: POST
Authorization: Bearer <token from login>

32. // Assign a subject to a teacher from already assigned class subjects (API 24)
API: << server >>/api/v1/assigning/subject
Content: assignedTeacherId, subjectId
Method: POST
Authorization: Bearer <token from login>

33. // Deleting an assigned subject for a particular teacher
API: << server >>/api/v1/assigning/delete_assigned_subject/assignedTeacherId/subjectId
Method: GET
Authorization: Bearer <token from login>

34. // Deleting an assigned class for a particular teacher
API: << server >>/api/v1/assigning/delete_assigned_class/assignedTeacherId
Method: GET
Authorization: Bearer <token from login>

35. // Get a teacher's assigned classes with subjects
API: << server >>/api/v1/assigning/all/id
Method: GET
Authorization: Bearer <token from login>

ACADEMIC YEAR AND TERM
36. // Creating a new academic year
API: << server >>/api/v1/academic_year/create
Method: POST
Content: name, startDate, endDate
Authorization: Bearer <token from login>

37. // Update academic year
API: << server >>/api/v1/academic_year/update/academicYearId
Content: { name, startDate, endDate }
Method: PUT
Authorization: Bearer <token from login>

38. // Fetching the active academic year
API: << server >>/api/v1/academic_year/active
Method: GET
Authorization: Bearer <token from login>

39. // Fetching the a particular academic year with its terms
API: << server >>/api/v1/academic_year/get_academic_year/academicYearId
Method: GET
Authorization: Bearer <token from login>

40. // Ending a particular academic year
API: << server >>/api/v1/academic_year/end/academicYearId
Method: PUT
Authorization: Bearer <token from login>

41. // Deleting a particular academic year
API: << server >>/api/v1/academic_year/delete/academicYearId
Method: DELETE
Authorization: Bearer <token from login>

42. // Creating a new academic term
API: << server >>/api/v1/academic_term/create
Content: { name, startDate, endDate }
Method: POST
Authorization: Bearer <token from login>

43. // Update academic term
API: << server >>/api/v1/academic_term/update/academicTermId
Content: { name, startDate, endDate, academicYearId }
Method: PUT
Authorization: Bearer <token from login>

44. // Fetching the active academic term
API: << server >>/api/v1/academic_term/active
Method: GET
Authorization: Bearer <token from login>

45. // List of all academic years
API: << server >>/api/v1/academic_year/all
Method: GET
Authorization: Bearer <token from login>

46. // List of all academic terms
API: << server >>/api/v1/academic_term/all
Method: GET
Authorization: Bearer <token from login>

47. // Ending a particular academic term
API: << server >>/api/v1/academic_term/end/academicTermId
Method: PUT
Authorization: Bearer <token from login>

48. // Deleting a particular academic term
API: << server >>/api/v1/academic_term/delete/academicTermId
Method: DELETE
Authorization: Bearer <token from login>

49. // Activating a pending academic term
API: << server >>/api/v1/academic_term/activate/academicTermId
Method: PUT
Authorization: Bearer <token from login>

50. // Activating a pending academic year
API: << server >>/api/v1/academic_year/activate/academicYearId
Method: PUT
Authorization: Bearer <token from login>

STUDENT ADMISSION
51. // Creating a new student, parent/guidian and assigninig to a class
API: << server >>/api/v1/student/new_admission
Method: POST
Content: { 
  student: {firstName, middleName, lastName, email, phone, address, dob, gender, nationality},
  parent: { parentFullName, title, relationship, parentAddress, parentEmail, parentPhone, homePhone },
  parentEmployment: { occupation, employer, employerAddress, workPhone },
  emergency: { emergencyName, emergencyTitle, emergencyAddress, emergencyPhone },
  classInfo: { classSessionId, academicYearId }
}
Authorization: Bearer <token from login>

52. // Update a student's DP url
API: << server >>/api/v1/student/update_dp/studentId
Content: passportPhoto as json
Method: POST
Authorization: Bearer <token from login>

53. // Fetch all students for active academic year
API: << server >>/api/v1/student/all
Method: GET
Authorization: Bearer <token from login>

54. // Update student details
API: << server >>/api/v1/student/update_details/studentId
Content: { firstName, middleName, lastName, email, phone, address, dob, gender, nationality }
Method: PUT
Authorization: Bearer <token from login>

55. // Update student emegency contact info
API: << server >>/api/v1/student/update_emergency_info/studentId
Content: { emergencyName, emergencyTitle, emergencyAddress, emergencyPhone }
Method: PUT
Authorization: Bearer <token from login>

56. // Update student's parent's info
API: << server >>/api/v1/student/update_parent_details/parentId
Content: { parentFullName, title, relationship, parentAddress, parentEmail, parentPhone, homePhone }
Method: PUT
Authorization: Bearer <token from login>

57. // Update student's parent's employment info
API: << server >>/api/v1/student/update_parent_employment/parentId
Content: { occupation, employer, employerAddress, workPhone }
Method: PUT
Authorization: Bearer <token from login>

58. // Update a student's class section
API: << server >>/api/v1/student/update_student_class/assignedClassId
Content: { classSessionId }
Method: PUT
Authorization: Bearer <token from login>

59. // Fetch academic year classSession students
API: << server >>/api/v1/student/class_students/academicYearId/classSessionId
Method: GET
Authorization: Bearer <token from login>

GRADING SYSTEM
60. // Create a new Grading point
API: << server >>/api/v1/grading_system/create
Method: POST
Content: { minScore, maxScore, grade, remarks }
Authorization: Bearer <token from login>

61. // Update an already created GradePoint
API: << server >>/api/v1/grading_system/update/GradePointId
Content: { minScore, maxScore, grade, remarks }
Method: PUT
Authorization: Bearer <token from login>

62. // Delete Grade Point
API: << server >>/api/v1/grading_system/delete/GradePointId
Method: DELETE
Authorization: Bearer <token from login>

63. // Fetch all GradePoints in descending order of grade
API: << server >>/api/v1/grading_system/all
Method: GET
Authorization: Bearer <token from login>


TEACHER ROLE
64. // Get a teacher's assigned classes after login
API: << server >>/api/v1/teacher/assigned_classes/teacherId
Method: GET
Authorization: Bearer <token from login>

65. // Get a teacher's assigned class's students
API: << server >>/api/v1/teacher/class_students/classSessionId
Method: GET
Authorization: Bearer <token from login>

66. // Get a teacher's assigned class's subjects
API: << server >>/api/v1/teacher/class_subjects/teacherId/classSessionId
Method: GET
Authorization: Bearer <token from login>

67. // Teacher sybject assignment summary
API: << server >>/api/v1/teacher/subject_assignment_summary/teacherId/classSessionId
Method: GET
Authorization: Bearer <token from login>

GRADING AND ASSESSMENT
68. // Create a new assessment
API: << server >>/api/v1/teacher/assessment/create
Method: POST
Content: { name, description, academicTermId, teacherId, classSessionId, subjectId, weight, marks }
Authorization: Bearer <token from login>

69. // Fetching a particular subject assessment
API: << server >>/api/v1/teacher/get_assessment/id
Method: GET
Authorization: Bearer <token from login>

70. // Updating a particular subject assessment
API: << server >>/api/v1/teacher/update_assessment/id
Content: { name, description, academicTermId, classSessionId, subjectId, weight, marks }
Method: PUT
Authorization: Bearer <token from login>

71. // Deleting a particular subject assessment
API: << server >>/api/v1/teacher/delete_assessment/id
Method: DELETE
Authorization: Bearer <token from login>

72. // Get all subject assessments for the active academic term
API: << server >>/api/v1/teacher/subject_assessments/classSessionId/subjectId
Method: GET
Authorization: Bearer <token from login>

73. // Grade student
API: << server >>/api/v1/teacher/grade_student
Method: POST
Content: { assessmentId, studentId, score }
Authorization: Bearer <token from login>

74. // Students' grades for a particular assessment
API: << server >>/api/v1/teacher/assessment_grades/assessmentId
Method: GET
Authorization: Bearer <token from login>

75. // Students' grades for a particular subject's assessments for a teacher
API: << server >>/api/v1/teacher/subject_assessment_grades/academicTermId/classSessionId/subjectId
Method: GET
Authorization: Bearer <token from login>

RESULTS
76. // Fetch class students' results for a particular academic term
API: << server >>/api/v1/result/class_students/academicTermId/classSessioId
Method: GET
Authorization: Bearer <token from login>

77. // Fetch a single student results for a particular academic term
API: << server >>/api/v1/result/single_student/studentId/academicTermId/classSessioId/
Method: GET
Authorization: Bearer <token from login>

PROMOTIONS
78. // Promote class students by head teacher
API: << server >>/api/v1/promotion/class
Method: POST
Content: { students, nextClassSessionId }
Authorization: Bearer <token from login>

79. // Repeat class students by head teacher
API: << server >>/api/v1/promotion/repeat_students
Method: POST
Content: { students }
Authorization: Bearer <token from login>

80. // Promote class students by Admin (Complexity)
API: << server >>/api/v1/promotion/class/admin
Method: POST
Content: { students, nextAcademicYearId, nextClassSessionId }
Authorization: Bearer <token from login>

81. // Repeat students by Admin (Complexity)
API: << server >>/api/v1/promotion/repeat_students/admin
Method: POST
Content: { students, nextAcademicYearId }
Authorization: Bearer <token from login>

BILLING OF STUDENTS
82. // Create a new fee type
API: << server >>/api/v1/fee_type/create
Method: POST
Content: { name, description }
Authorization: Bearer <token from login>

83. // Update an existing fee type
API: << server >>/api/v1/fee_type/update/feeTypeId
Method: PUT
Content: { name, description }
Authorization: Bearer <token from login>

84. // Delete an existing fee type
API: << server >>/api/v1/fee_type/delete/feeTypeId
Method: DELETE
Authorization: Bearer <token from login>

85. // Fetch all FeeTypes for multiselection when Billing
API: << server >>/api/v1/fee_type/all
Method: GET
Authorization: Bearer <token from login>

86. // Create billing records or create new records if not found
API: << server >>/api/v1/billing/create_update
Method: POST
Content: { studentIds, academicYearId, academicTermId, feeDetails }
Authorization: Bearer <token from login>

87A. // Fetch class students billing details for a particular academic term
API: << server >>/api/v1/bills/class_students/academicYearId/academicTermId/classSessionId
Method: GET
Authorization: Bearer <token from login>

87B. // Fetch class students billing details for a particular academic year
API: << server >>/api/v1/bills/class_students/academicYearId/classSessionId
Method: GET
Authorization: Bearer <token from login>

88. // Calculate total amount owed by a student and check for overpayment
API: << server >>/api/v1/billings/student/owed/studentId
Method: GET
Authorization: Bearer <token from login>

89. // Calculate total amount owed by class students and check for overpayment
API: << server >>/api/v1/billings/students/owed/classSessionId
Method: GET
Authorization: Bearer <token from login>

90. // Process fee payment for a student
API: << server >>/api/v1/payments/student/process
Method: POST
Content: { studentId, amount }
Authorization: Bearer <token from login>

NOTIFICATIONS
91. // Forward list of students' results to parents for a particular academic term
API: << server >>/api/v1/notifications/student/results_parent
Method: POST
Content: { studentIds, classSessionId, academicTermId }
Authorization: Bearer <token from login>

92. // Forward list of students' fees to parents
API: << server >>/api/v1/notifications/student/fees_parent
Method: POST
Content: { studentIds }
Authorization: Bearer <token from login>

93. // Send genearl reminder to parents
API: << server >>/api/v1/notifications/reminder/parent
Method: POST
Content: { subject, classId, studentId, all, content, method }
Authorization: Bearer <token from login>


ATTENDANCE
94. // Mark attendance
API: << server >>/api/v1/attendance/mark
Method: POST
Content: { students, academicTermId, status }
status = "Present" || "Absent"
Authorization: Bearer <token from login>

95. // Fetch today's attendence
API: << server >>/api/v1/attendance/class/today/academicTermId/classSessionId
Method: GET
Authorization: Bearer <token from login>

96. // Fetch class students' attendance for a particular period
API: << server >>/api/v1/attendance/class/period
Method: POST
Content: { startDate, endDate, classSessionId }
Authorization: Bearer <token from login>






// Staff Requesting Password Reset from Admin
API: << server >>/api/v1/staff/password-reset-request
Content: userID(phone/userName/email) as a post request

// Admin resetting password with email link request or from Admin requests' list
API: << server >>/api/v1/staff/admin-reset-password/"id:id, role:role" 
NB: resetToken or "id:id, role:role"

// List of pending Password reset requests
API: << server >>/api/v1/staff/pending-password-reset-requests
Authorization: Bearer <token from login>